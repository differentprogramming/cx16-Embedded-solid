#include "pch.h"
#include <iostream>

/* All suite a 6502 test from https://github.com/pmonta/FPGA-netlist-tools by Peter Monta
 *
 * Note the parts taken from there are GPLv2
 *
 */

 //------------------------------------------------------------
 //-----------       Created with 010 Editor        -----------
 //------         www.sweetscape.com/010editor/          ------
 //
 // File    : C:\commanderx16\dev\FPGA-netlist-tools-master\6502-test-code\AllSuiteA.bin
 // Address : 16384 (0x4000)
 // Size    : 1475 (0x5C3)
 //------------------------------------------------------------

const int PreAssembledLength = 1475;

uint8_t PreAssembled[PreAssembledLength] = {
	0xA9, 0x00, 0x8D, 0x10, 0x02, 0xA9, 0x55, 0x8D, 0x00, 0x02, 0xA9, 0xAA, 0x8D, 0x01, 0x02, 0xA9, 0xFF, 0x8D, 0x02, 0x02, 0xA9, 0x6E, 0x8D, 0x03, 0x02, 0xA9, 0x42, 0x8D, 0x04, 0x02, 0xA9, 0x33,
	0x8D, 0x05, 0x02, 0xA9, 0x9D, 0x8D, 0x06, 0x02, 0xA9, 0x7F, 0x8D, 0x07, 0x02, 0xA9, 0xA5, 0x8D, 0x08, 0x02, 0xA9, 0x1F, 0x8D, 0x09, 0x02, 0xA9, 0xCE, 0x8D, 0x0A, 0x02, 0xA9, 0x29, 0x8D, 0x0B,
	0x02, 0xA9, 0x42, 0x8D, 0x0C, 0x02, 0xA9, 0x6C, 0x8D, 0x0D, 0x02, 0xA9, 0x42, 0x8D, 0x0E, 0x02, 0xA9, 0x55, 0xA2, 0x2A, 0xA0, 0x73, 0x85, 0x81, 0xA9, 0x01, 0x85, 0x61, 0xA9, 0x7E, 0xA5, 0x81,
	0x8D, 0x10, 0x09, 0xA9, 0x7E, 0xAD, 0x10, 0x09, 0x95, 0x56, 0xA9, 0x7E, 0xB5, 0x56, 0x84, 0x60, 0x91, 0x60, 0xA9, 0x7E, 0xB1, 0x60, 0x9D, 0xFF, 0x07, 0xA9, 0x7E, 0xBD, 0xFF, 0x07, 0x99, 0xFF,
	0x07, 0xA9, 0x7E, 0xB9, 0xFF, 0x07, 0x81, 0x36, 0xA9, 0x7E, 0xA1, 0x36, 0x86, 0x50, 0xA6, 0x60, 0xA4, 0x50, 0x8E, 0x13, 0x09, 0xA2, 0x22, 0xAE, 0x13, 0x09, 0x8C, 0x14, 0x09, 0xA0, 0x99, 0xAC,
	0x14, 0x09, 0x94, 0x2D, 0x96, 0x77, 0xA0, 0x99, 0xB4, 0x2D, 0xA2, 0x22, 0xB6, 0x77, 0xA0, 0x99, 0xBC, 0xA0, 0x08, 0xA2, 0x22, 0xBE, 0xA1, 0x08, 0x9D, 0x00, 0x02, 0xAD, 0x2A, 0x02, 0xCD, 0x00,
	0x02, 0xF0, 0x03, 0x4C, 0xC0, 0x45, 0xA9, 0xFE, 0x8D, 0x10, 0x02, 0xA9, 0x55, 0x29, 0x53, 0x09, 0x38, 0x49, 0x11, 0x85, 0x99, 0xA9, 0xB9, 0x85, 0x10, 0xA9, 0xE7, 0x85, 0x11, 0xA9, 0x39, 0x85,
	0x12, 0xA5, 0x99, 0x25, 0x10, 0x05, 0x11, 0x45, 0x12, 0xA2, 0x10, 0x85, 0x99, 0xA9, 0xBC, 0x85, 0x20, 0xA9, 0x31, 0x85, 0x21, 0xA9, 0x17, 0x85, 0x22, 0xA5, 0x99, 0x35, 0x10, 0x15, 0x11, 0x55,
	0x12, 0x85, 0x99, 0xA9, 0x6F, 0x8D, 0x10, 0x01, 0xA9, 0x3C, 0x8D, 0x11, 0x01, 0xA9, 0x27, 0x8D, 0x12, 0x01, 0xA5, 0x99, 0x2D, 0x10, 0x01, 0x0D, 0x11, 0x01, 0x4D, 0x12, 0x01, 0x85, 0x99, 0xA9,
	0x8A, 0x8D, 0x20, 0x01, 0xA9, 0x47, 0x8D, 0x21, 0x01, 0xA9, 0x8F, 0x8D, 0x22, 0x01, 0xA5, 0x99, 0x3D, 0x10, 0x01, 0x1D, 0x11, 0x01, 0x5D, 0x12, 0x01, 0xA0, 0x20, 0x85, 0x99, 0xA9, 0x73, 0x8D,
	0x30, 0x01, 0xA9, 0x2A, 0x8D, 0x31, 0x01, 0xA9, 0xF1, 0x8D, 0x32, 0x01, 0xA5, 0x99, 0x39, 0x10, 0x01, 0x19, 0x11, 0x01, 0x59, 0x12, 0x01, 0x85, 0x99, 0xA9, 0x70, 0x85, 0x30, 0xA9, 0x01, 0x85,
	0x31, 0xA9, 0x71, 0x85, 0x32, 0xA9, 0x01, 0x85, 0x33, 0xA9, 0x72, 0x85, 0x34, 0xA9, 0x01, 0x85, 0x35, 0xA9, 0xC5, 0x8D, 0x70, 0x01, 0xA9, 0x7C, 0x8D, 0x71, 0x01, 0xA9, 0xA1, 0x8D, 0x72, 0x01,
	0xA5, 0x99, 0x21, 0x20, 0x01, 0x22, 0x41, 0x24, 0x85, 0x99, 0xA9, 0x60, 0x85, 0x40, 0xA9, 0x01, 0x85, 0x41, 0xA9, 0x61, 0x85, 0x42, 0xA9, 0x01, 0x85, 0x43, 0xA9, 0x62, 0x85, 0x44, 0xA9, 0x01,
	0x85, 0x45, 0xA9, 0x37, 0x8D, 0x50, 0x02, 0xA9, 0x23, 0x8D, 0x51, 0x02, 0xA9, 0x9D, 0x8D, 0x52, 0x02, 0xA5, 0x99, 0xA0, 0xF0, 0x31, 0x40, 0x11, 0x42, 0x51, 0x44, 0x85, 0xA9, 0xA5, 0xA9, 0xCD,
	0x01, 0x02, 0xF0, 0x08, 0xA9, 0x01, 0x8D, 0x10, 0x02, 0x4C, 0xC0, 0x45, 0xA9, 0xFF, 0xA2, 0x00, 0x85, 0x90, 0xE6, 0x90, 0xE6, 0x90, 0xA5, 0x90, 0xA6, 0x90, 0x95, 0x90, 0xF6, 0x90, 0xB5, 0x90,
	0xA6, 0x91, 0x9D, 0x90, 0x01, 0xEE, 0x92, 0x01, 0xBD, 0x90, 0x01, 0xAE, 0x92, 0x01, 0x9D, 0x90, 0x01, 0xFE, 0x90, 0x01, 0xBD, 0x90, 0x01, 0xAE, 0x93, 0x01, 0x9D, 0x70, 0x01, 0xDE, 0x70, 0x01,
	0xBD, 0x70, 0x01, 0xAE, 0x74, 0x01, 0x9D, 0x70, 0x01, 0xCE, 0x73, 0x01, 0xBD, 0x70, 0x01, 0xAE, 0x73, 0x01, 0x95, 0x70, 0xD6, 0x70, 0xB5, 0x70, 0xA6, 0x72, 0x95, 0x70, 0xC6, 0x71, 0xC6, 0x71,
	0xA5, 0x71, 0xCD, 0x02, 0x02, 0xF0, 0x08, 0xA9, 0x02, 0x8D, 0x10, 0x02, 0x4C, 0xC0, 0x45, 0xA9, 0x4B, 0x4A, 0x0A, 0x85, 0x50, 0x06, 0x50, 0x06, 0x50, 0x46, 0x50, 0xA5, 0x50, 0xA6, 0x50, 0x09,
	0xC9, 0x85, 0x60, 0x16, 0x4C, 0x56, 0x4C, 0x56, 0x4C, 0xB5, 0x4C, 0xA6, 0x60, 0x09, 0x41, 0x8D, 0x2E, 0x01, 0x5E, 0x00, 0x01, 0x5E, 0x00, 0x01, 0x1E, 0x00, 0x01, 0xBD, 0x00, 0x01, 0xAE, 0x2E,
	0x01, 0x09, 0x81, 0x9D, 0x00, 0x01, 0x4E, 0x36, 0x01, 0x4E, 0x36, 0x01, 0x0E, 0x36, 0x01, 0xBD, 0x00, 0x01, 0x2A, 0x2A, 0x6A, 0x85, 0x70, 0xA6, 0x70, 0x09, 0x03, 0x95, 0x0C, 0x26, 0xC0, 0x66,
	0xC0, 0x66, 0xC0, 0xB5, 0x0C, 0xA6, 0xC0, 0x85, 0xD0, 0x36, 0x75, 0x36, 0x75, 0x76, 0x75, 0xA5, 0xD0, 0xA6, 0xD0, 0x9D, 0x00, 0x01, 0x2E, 0xB7, 0x01, 0x2E, 0xB7, 0x01, 0x2E, 0xB7, 0x01, 0x6E,
	0xB7, 0x01, 0xBD, 0x00, 0x01, 0xAE, 0xB7, 0x01, 0x8D, 0xDD, 0x01, 0x3E, 0x00, 0x01, 0x7E, 0x00, 0x01, 0x7E, 0x00, 0x01, 0xAD, 0xDD, 0x01, 0xCD, 0x03, 0x02, 0xF0, 0x08, 0xA9, 0x03, 0x8D, 0x10,
	0x02, 0x4C, 0xC0, 0x45, 0xA9, 0xE8, 0x85, 0x20, 0xA9, 0x42, 0x85, 0x21, 0xA9, 0x00, 0x09, 0x03, 0x4C, 0xD5, 0x42, 0x09, 0xFF, 0x09, 0x30, 0x20, 0xE1, 0x42, 0x09, 0x42, 0x6C, 0x20, 0x00, 0x09,
	0xFF, 0x85, 0x30, 0xA6, 0x30, 0xA9, 0x00, 0x60, 0x95, 0x0D, 0xA5, 0x40, 0xCD, 0x04, 0x02, 0xF0, 0x08, 0xA9, 0x04, 0x8D, 0x10, 0x02, 0x4C, 0xC0, 0x45, 0xA9, 0x35, 0xAA, 0xCA, 0xCA, 0xE8, 0x8A,
	0xA8, 0x88, 0x88, 0xC8, 0x98, 0xAA, 0xA9, 0x20, 0x9A, 0xA2, 0x10, 0xBA, 0x8A, 0x85, 0x40, 0xA5, 0x40, 0xCD, 0x05, 0x02, 0xF0, 0x08, 0xA9, 0x05, 0x8D, 0x10, 0x02, 0x4C, 0xC0, 0x45, 0x2A, 0xA9,
	0x6A, 0x85, 0x50, 0xA9, 0x6B, 0x85, 0x51, 0xA9, 0xA1, 0x85, 0x60, 0xA9, 0xA2, 0x85, 0x61, 0xA9, 0xFF, 0x69, 0xFF, 0x69, 0xFF, 0xE9, 0xAE, 0x85, 0x40, 0xA6, 0x40, 0x75, 0x00, 0xF5, 0x01, 0x65,
	0x60, 0xE5, 0x61, 0x8D, 0x20, 0x01, 0xA9, 0x4D, 0x8D, 0x21, 0x01, 0xA9, 0x23, 0x6D, 0x20, 0x01, 0xED, 0x21, 0x01, 0x85, 0xF0, 0xA6, 0xF0, 0xA9, 0x64, 0x8D, 0x24, 0x01, 0xA9, 0x62, 0x8D, 0x25,
	0x01, 0xA9, 0x26, 0x7D, 0x00, 0x01, 0xFD, 0x01, 0x01, 0x85, 0xF1, 0xA4, 0xF1, 0xA9, 0xE5, 0x8D, 0x28, 0x01, 0xA9, 0xE9, 0x8D, 0x29, 0x01, 0xA9, 0x34, 0x79, 0x00, 0x01, 0xF9, 0x01, 0x01, 0x85,
	0xF2, 0xA6, 0xF2, 0xA9, 0x20, 0x85, 0x70, 0xA9, 0x01, 0x85, 0x71, 0xA9, 0x24, 0x85, 0x72, 0xA9, 0x01, 0x85, 0x73, 0x61, 0x41, 0xE1, 0x3F, 0x85, 0xF3, 0xA4, 0xF3, 0xA9, 0xDA, 0x85, 0x80, 0xA9,
	0x00, 0x85, 0x81, 0xA9, 0xDC, 0x85, 0x82, 0xA9, 0x00, 0x85, 0x83, 0xA9, 0xAA, 0x71, 0x80, 0xF1, 0x82, 0x85, 0x30, 0xA5, 0x30, 0xCD, 0x06, 0x02, 0xF0, 0x08, 0xA9, 0x06, 0x8D, 0x10, 0x02, 0x4C,
	0xC0, 0x45, 0xA9, 0x00, 0x85, 0x34, 0xA9, 0xFF, 0x8D, 0x30, 0x01, 0xA9, 0x99, 0x8D, 0x9D, 0x01, 0xA9, 0xDB, 0x8D, 0x99, 0x01, 0xA9, 0x2F, 0x85, 0x32, 0xA9, 0x32, 0x85, 0x4F, 0xA9, 0x30, 0x85,
	0x33, 0xA9, 0x70, 0x85, 0xAF, 0xA9, 0x18, 0x85, 0x30, 0xC9, 0x18, 0xF0, 0x02, 0x29, 0x00, 0x09, 0x01, 0xC5, 0x30, 0xD0, 0x02, 0x29, 0x00, 0xA2, 0x00, 0xCD, 0x30, 0x01, 0xF0, 0x04, 0x85, 0x40,
	0xA6, 0x40, 0xD5, 0x27, 0xD0, 0x06, 0x09, 0x84, 0x85, 0x41, 0xA6, 0x41, 0x29, 0xDB, 0xDD, 0x00, 0x01, 0xF0, 0x02, 0x29, 0x00, 0x85, 0x42, 0xA4, 0x42, 0x29, 0x00, 0xD9, 0x00, 0x01, 0xD0, 0x02,
	0x09, 0x0F, 0x85, 0x43, 0xA6, 0x43, 0x09, 0x24, 0xC1, 0x40, 0xF0, 0x02, 0x09, 0x7F, 0x85, 0x44, 0xA4, 0x44, 0x49, 0x0F, 0xD1, 0x33, 0xD0, 0x04, 0xA5, 0x44, 0x85, 0x15, 0xA5, 0x15, 0xCD, 0x07,
	0x02, 0xF0, 0x08, 0xA9, 0x07, 0x8D, 0x10, 0x02, 0x4C, 0xC0, 0x45, 0xA9, 0xA5, 0x85, 0x20, 0x8D, 0x20, 0x01, 0xA9, 0x5A, 0x85, 0x21, 0xA2, 0xA5, 0xE0, 0xA5, 0xF0, 0x02, 0xA2, 0x01, 0xE4, 0x20,
	0xF0, 0x02, 0xA2, 0x02, 0xEC, 0x20, 0x01, 0xF0, 0x02, 0xA2, 0x03, 0x86, 0x30, 0xA4, 0x30, 0xC0, 0xA5, 0xF0, 0x02, 0xA0, 0x04, 0xC4, 0x20, 0xF0, 0x02, 0xA0, 0x05, 0xCC, 0x20, 0x01, 0xF0, 0x02,
	0xA0, 0x06, 0x84, 0x31, 0xA5, 0x31, 0x24, 0x20, 0xD0, 0x02, 0xA9, 0x07, 0x2C, 0x20, 0x01, 0xD0, 0x02, 0xA9, 0x08, 0x24, 0x21, 0xD0, 0x02, 0x85, 0x42, 0xA5, 0x42, 0xCD, 0x08, 0x02, 0xF0, 0x08,
	0xA9, 0x08, 0x8D, 0x10, 0x02, 0x4C, 0xC0, 0x45, 0xA9, 0x54, 0x85, 0x32, 0xA9, 0xB3, 0x85, 0xA1, 0xA9, 0x87, 0x85, 0x43, 0xA2, 0xA1, 0x10, 0x02, 0xA2, 0x32, 0xB4, 0x00, 0x10, 0x04, 0xA9, 0x05,
	0xA6, 0xA1, 0x30, 0x02, 0xE9, 0x03, 0x30, 0x02, 0xA9, 0x41, 0x49, 0x30, 0x85, 0x32, 0x75, 0x00, 0x50, 0x02, 0xA9, 0x03, 0x85, 0x54, 0xB6, 0x00, 0x75, 0x51, 0x50, 0x02, 0xA9, 0xE5, 0x75, 0x40,
	0x70, 0x05, 0x99, 0x01, 0x00, 0x65, 0x55, 0x70, 0x02, 0xA9, 0x00, 0x69, 0xF0, 0x90, 0x04, 0x85, 0x60, 0x65, 0x43, 0x90, 0x02, 0xA9, 0xFF, 0x65, 0x54, 0xB0, 0x04, 0x69, 0x87, 0xA6, 0x60, 0xB0,
	0x02, 0xA9, 0x00, 0x95, 0x73, 0xA5, 0x80, 0xCD, 0x09, 0x02, 0xF0, 0x08, 0xA9, 0x09, 0x8D, 0x10, 0x02, 0x4C, 0xC0, 0x45, 0x69, 0x00, 0xA9, 0x99, 0x69, 0x87, 0x18, 0xEA, 0x90, 0x04, 0x69, 0x60,
	0x69, 0x93, 0x38, 0xEA, 0x90, 0x01, 0xB8, 0x50, 0x02, 0xA9, 0x00, 0x69, 0xAD, 0xEA, 0x85, 0x30, 0xA5, 0x30, 0xCD, 0x0A, 0x02, 0xF0, 0x08, 0xA9, 0x0A, 0x8D, 0x10, 0x02, 0x4C, 0xC0, 0x45, 0x69,
	0x01, 0xA9, 0x27, 0x69, 0x01, 0x38, 0x08, 0x18, 0x28, 0x69, 0x00, 0x48, 0xA9, 0x00, 0x68, 0x85, 0x30, 0xA5, 0x30, 0xCD, 0x0B, 0x02, 0xF0, 0x08, 0xA9, 0x0B, 0x8D, 0x10, 0x02, 0x4C, 0xC0, 0x45,
	0x18, 0xA9, 0x42, 0x90, 0x04, 0x85, 0x33, 0xB0, 0x0A, 0xA9, 0x45, 0x48, 0xA9, 0x61, 0x48, 0x38, 0x08, 0x18, 0x40, 0xA5, 0x33, 0xCD, 0x0C, 0x02, 0xF0, 0x08, 0xA9, 0x0C, 0x8D, 0x10, 0x02, 0x4C,
	0xC0, 0x45, 0x69, 0x01, 0x78, 0xF8, 0x08, 0x68, 0x85, 0x20, 0x58, 0xD8, 0x08, 0x68, 0x65, 0x20, 0x85, 0x21, 0xA5, 0x21, 0xCD, 0x0D, 0x02, 0xF0, 0x08, 0xA9, 0x0D, 0x8D, 0x10, 0x02, 0x4C, 0xC0,
	0x45, 0xA9, 0x41, 0x85, 0x60, 0xE6, 0x60, 0xA5, 0x60, 0xCD, 0x0E, 0x02, 0xF0, 0x08, 0xA9, 0x0E, 0x8D, 0x10, 0x02, 0x4C, 0xC0, 0x45, 0xA9, 0xFE, 0xCD, 0x10, 0x02, 0xD0, 0x03, 0xEE, 0x10, 0x02,
	0x4C, 0xC0, 0x45
};

bool emulate65c02::test_assembler()
//;	.ORG $4000
//*= $4000
{
	compile_point = 0x4000;
	//start:
	Label start;
	Label test00, test01, test02, test03, test04, test05, test06, test07;
	Label test00pass, theend, jump1, subr, final, beq1, bne1, beq2, bne2, beq3;
	Label bne3, beq4, bne4, test08, b1, b2, b3, b4, b5, b6, b7, b8, b9, test09,
		bpl1, bpl2, bmi1, bmi2, bvc1, bvc2, bvs1, bvs2, bcc1, bcc2, bcs1, bcs2,
		test10, t10bcc1, t10bcc2, t10bvc1, test11, test12, runstuff,
		t12end, test13, test14, suiteafinal;
	start.set_target(this);
//; EXPECTED FINAL RESULTS: $0210 = FF
//; (any other number will be the 
//;  test that failed)
//
//; initialize:
//	LDA #$00
	lda_imm(0);
//	STA $0210
	sta_abs(0x210);
//	; store each test's expected
//	LDA #$55
	lda_imm(0x55);
//	STA $0200
	sta_abs(0x200);
//	LDA #$AA
	lda_imm(0xaa);
//	STA $0201
	sta_abs(0x201);
//	LDA #$FF
	lda_imm(0xff);
//	STA $0202
	sta_abs(0x202);
//	LDA #$6E
	lda_imm(0x6e);
//	STA $0203
	sta_abs(0x203);
//	LDA #$42
	lda_imm(0x42);
//	STA $0204
	sta_abs(0x204);
//	LDA #$33
	lda_imm(0x33);
//	STA $0205
	sta_abs(0x205);
//	LDA #$9D
	lda_imm(0x9d);
//	STA $0206
	sta_abs(0x206);
//	LDA #$7F
	lda_imm(0x7f);
//	STA $0207
	sta_abs(0x207);
//	LDA #$A5
	lda_imm(0xa5);
//	STA $0208
	sta_abs(0x208);
//	LDA #$1F
	lda_imm(0x1f);
//	STA $0209
	sta_abs(0x209);
//	LDA #$CE
	lda_imm(0xce);
//	STA $020A
	sta_abs(0x20a);
//	LDA #$29
	lda_imm(0x29);
//	STA $020B
	sta_abs(0x20b);
//	LDA #$42
	lda_imm(0x42);
//	STA $020C
	sta_abs(0x20c);
//	LDA #$6C
	lda_imm(0x6c);
//	STA $020D
	sta_abs(0x20d);
//	LDA #$42
	lda_imm(0x42);
//	STA $020E
	sta_abs(0x20e);
//	
//
//; expected result: $022A = 0x55
//test00:
	test00.set_target(this);
//   	LDA #85
	lda_imm(85);
//	LDX #42
	ldx_imm(42);
//	LDY #115
	ldy_imm(115);
//	STA $81
	sta_zp(0x81);
//	LDA #$01
	lda_imm(0x01);
//	STA $61
	sta_zp(0x61);
//	LDA #$7E
	lda_imm(0x7e);
//	LDA $81
	lda_zp(0x81);
//	STA $0910
	sta_abs(0x910);
//	LDA #$7E
	lda_imm(0x7e);
//	LDA $0910
	lda_abs(0x910);
//	STA $56,X
	sta_zpx(0x56);
//	LDA #$7E
	lda_imm(0x7e);
//	LDA $56,X
	lda_zpx(0x56);
//	STY $60
	sty_zp(0x60);
//	STA ($60),Y
	sta_izy(0x60);
//	LDA #$7E
	lda_imm(0x7e);
//	LDA ($60),Y
	lda_izy(0x60);
//	STA $07ff,X
	sta_abx(0x7ff);
//	LDA #$7E
	lda_imm(0x7e);
//	LDA $07ff,X
	lda_abx(0x7ff);
//	STA $07ff,Y
	sta_aby(0x7ff);
//	LDA #$7E
	lda_imm(0x7e);
//	LDA $07ff,Y
	lda_aby(0x7ff);
//	STA ($36,X)
	sta_izx(0x36);
//	LDA #$7E
	lda_imm(0x7e);
//	LDA ($36,X)
	lda_izx(0x36);
//	STX $50
	stx_zp(0x50);
//	LDX $60
	ldx_zp(0x60);
//	LDY $50
	ldy_zp(0x50);
//	STX $0913
	stx_abs(0x913);
//	LDX #$22
	ldx_imm(0x22);
//	LDX $0913
	ldx_abs(0x913);
//	STY $0914
	sty_abs(0x914);
//	LDY #$99
	ldy_imm(0x99);
//	LDY $0914
	ldy_abs(0x914);
//	STY $2D,X
	sty_zpx(0x2d);
//	STX $77,Y
	stx_zpy(0x77);
//	LDY #$99
	ldy_imm(0x99);
//	LDY $2D,X
	ldy_zpx(0x2d);
//	LDX #$22
	ldx_imm(0x22);
//	LDX $77,Y
	ldx_zpy(0x77);
//	LDY #$99
	ldy_imm(0x99);
//	LDY $08A0,X
	ldy_abx(0x8a0);
//	LDX #$22
	ldx_imm(0x22);
//	LDX $08A1,Y
	ldx_aby(0x8a1);
//	STA $0200,X
	sta_abx(0x200);
//	
//; CHECK test00:
//	LDA $022A
	lda_abs(0x22a);
//	CMP $0200
	cmp_abs(0x200);
//	BEQ test00pass
	beq(test00pass, true);
//	JMP theend
	jmp(theend);
//test00pass:
	test00pass.set_target(this);
//	LDA #$FE
	lda_imm(0xfe);
//	STA $0210
	sta_abs(0x210);
//	
//	
//; expected result: $A9 = 0xAA
//test01:
	test01.set_target(this);
//	; imm
//	LDA #85
	lda_imm(85);
//	AND #83
	and_imm(83);
//	ORA #56
	ora_imm(56);

//	EOR #17
	eor_imm(17);
//	
//	; zpg
//	STA $99
	sta_zp(0x99);
//	LDA #185
	lda_imm(185);
//	STA $10
	sta_zp(0x10);
//	LDA #231
	lda_imm(231);
//	STA $11
	sta_zp(0x11);
//	LDA #57
	lda_imm(57);
//	STA $12
	sta_zp(0x12);
//	LDA $99
	lda_zp(0x99);
//	AND $10
	and_zp(0x10);
//	ORA $11
	ora_zp(0x11);
//	EOR $12
	eor_zp(0x12);
//	
//	; zpx
//	LDX #16
	ldx_imm(16);
//	STA $99
	sta_zp(0x99);
//	LDA #188
	lda_imm(188);
//	STA $20
	sta_zp(0x20);
//	LDA #49
	lda_imm(49);
//	STA $21
	sta_zp(0x21);
//	LDA #23
	lda_imm(23);
//	STA $22
	sta_zp(0x22);
//	LDA $99
	lda_zp(0x99);
//	AND $10,X
	and_zpx(0x10);
//	ORA $11,X
	ora_zpx(0x11);
//	EOR $12,X
	eor_zpx(0x12);
//	
//	; abs
//	STA $99
	sta_zp(0x99);
	lda_imm (111);
	sta_abs (0x0110);
	lda_imm (60);
	sta_abs (0x0111);
	lda_imm (39);
	sta_abs (0x0112);
	lda_zp (0x99);
	and_abs (0x0110);
	ora_abs (0x0111);
	eor_abs (0x0112);
//	
//	; abx
	sta_zp (0x99);
	lda_imm (138);
	sta_abs (0x0120);
	lda_imm (71);
	sta_abs (0x0121);
	lda_imm (143);
	sta_abs (0x0122);
	lda_zp (0x99);
	and_abx (0x0110);
	ora_abx (0x0111);
	eor_abx (0x0112);
//	
//	; aby
	ldy_imm (32);
	sta_zp (0x99);
	lda_imm (115);
	sta_abs (0x0130);
	lda_imm (42);
	sta_abs (0x0131);
	lda_imm (241);
	sta_abs (0x0132);
	lda_zp (0x99);
	and_aby (0x0110);
	ora_aby (0x0111);
	eor_aby (0x0112);
//	
//	; idx
	sta_zp (0x99);
	lda_imm (112);
	sta_zp (0x30);
	lda_imm (0x01);
	sta_zp (0x31);
	lda_imm (113);
	sta_zp (0x32);
	lda_imm (0x01);
	sta_zp (0x33);
	lda_imm (114);
	sta_zp (0x34);
    lda_imm (0x01);
    sta_zp (0x35);
	lda_imm (197);
	sta_abs (0x0170);
	lda_imm (124);
	sta_abs (0x0171);
	lda_imm (161);
	sta_abs (0x0172);
	lda_zp (0x99);
	and_izx (0x20);
	ora_izx (0x22);
	eor_izx (0x24);
//	
//	; idy
	sta_zp (0x99);
	lda_imm (96);
	sta_zp (0x40);
	lda_imm (0x01);
	sta_zp (0x41);
	lda_imm (97);
	sta_zp (0x42);
	lda_imm (0x01);
	sta_zp (0x43);
	lda_imm (98);
	sta_zp (0x44);
	lda_imm (0x01);
	sta_zp (0x45);
	lda_imm (55);
	sta_abs (0x0250);
	lda_imm (35);
	sta_abs (0x0251);
	lda_imm (157);
	sta_abs (0x0252);
	lda_zp (0x99);
	ldy_imm (0xf0);
	and_izy (0x40);
	ora_izy (0x42);
	eor_izy (0x44);
//	
	sta_zp (0xa9);
//	
//; check test01
	lda_zp (0xa9);
	cmp_abs (0x0201);
	beq(test02,true);
	lda_imm(0x01);
	sta_abs(0x0210);
	jmp(theend);
//	
//	
//; expected result: $71 = 0xFF
//test02:
	test02.set_target(this);
	lda_imm (0xff);
	ldx_imm (0x00);
	
	sta_zp (0x90);
	inc_zp (0x90);
	inc_zp (0x90);
	lda_zp (0x90);
	ldx_zp (0x90);
	
	sta_zpx (0x90);
	inc_zpx (0x90);
	lda_zpx (0x90);
	ldx_zp (0x91);
	
	sta_abx (0x0190);
	inc_abs (0x0192);
	lda_abx (0x0190);
	ldx_abs (0x0192);
	
	sta_abx (0x0190);
	inc_abx (0x0190);
	lda_abx (0x0190);
	ldx_abs (0x0193);
	
	sta_abx (0x0170);
	dec_abx (0x0170);
	lda_abx (0x0170);
	ldx_abs (0x0174);
	
	sta_abx (0x0170);
	dec_abs (0x0173);
	lda_abx (0x0170);
	ldx_abs (0x0173);

	sta_zpx (0x70);
	dec_zpx (0x70);
	lda_zpx (0x70);
	ldx_zp (0x72);
	
	sta_zpx (0x70);
	dec_zp (0x71);
	dec_zp (0x71);
	
//; check test02
	lda_zp (0x71);
	cmp_abs (0x0202);
	beq(test03, true);
	lda_imm (0x02);
	sta_abs (0x0210);
	jmp (theend);
//	
//	
//; expected result: $01DD = 0x6E
//test03:
	test03.set_target(this);
	lda_imm(0x4b);
	lsr();
	asl();
	
	sta_zp(0x50);
	asl_zp(0x50);
	asl_zp(0x50);
	lsr_zp(0x50);
	lda_zp(0x50);
	
	ldx_zp(0x50);
	ora_imm (0xc9);
	sta_zp(0x60);
	asl_zpx(0x4c);
	lsr_zpx(0x4c);
	lsr_zpx(0x4c);
	lda_zpx(0x4c);
	
	ldx_zp(0x60);
	ora_imm (0x41);
	sta_abs (0x012e);
	lsr_abx (0x0100);
	lsr_abx(0x0100);
	asl_abx(0x0100);
	lda_abx(0x0100);
	
	ldx_abs(0x012e);
	ora_imm (0x81);
	sta_abx(0x0100);
	lsr_abs(0x0136);
	lsr_abs(0x0136);
	asl_abs(0x0136);
	lda_abx (0x0100);
	
	//; rol & ror
	
	rol();
	rol();
	ror();
	sta_zp(0x70);
	
	ldx_zp(0x70);
	ora_imm (0x03);
	sta_zpx (0x0c);
	rol_zp(0xc0);
	ror_zp(0xc0);
	ror_zp(0xc0);
	lda_zpx (0x0c);
	
	ldx_zp(0xc0);
	sta_zp(0xd0);
	rol_zpx (0x75);
	rol_zpx(0x75);
	ror_zpx(0x75);
	lda_zp(0xd0);
	
	ldx_zp(0xd0);
	sta_abx (0x0100);
	rol_abs(0x01b7);
	rol_abs(0x01b7);
	rol_abs(0x01b7);
	ror_abs(0x01b7);
	lda_abx(0x0100);
	
	ldx_abs(0x01b7);
	sta_abs(0x01dd);
	rol_abx(0x0100);
	ror_abx(0x0100);
	ror_abx(0x0100);
	
//; check test03
	lda_abs(0x01dd);
	cmp_abs(0x0203);
	beq(test04, true);
	lda_imm (0x03);
	sta_abs(0x0210);
	jmp(theend);
	
	
//; expected result:_ (0x40 = 0x42
//test04:
	test04.set_target(this);
	lda_imm(0xe8); //;originally:#0x7c
	sta_zp(0x20);
	lda_imm (0x42); //;originally:#0x02
	sta_zp(0x21);
	lda_imm (0x00);
	ora_imm (0x03);
	jmp(jump1);
	ora_imm(0xff); //; not done
//jump1:
	jump1.set_target(this);
	ora_imm(0x300);
	jsr(subr);
	ora_imm(0x42);
	jmp_ind(0x0020);
	ora_imm(0xff); //; not done
//subr:
	subr.set_target(this);
	sta_zp(0x30);
	ldx_zp(0x30);
	lda_imm(0x00);
	rts();
//final:
	final.set_target(this);
	sta_zpx(0x0d);
	
//; check test04
	lda_zp(0x40);
	cmp_abs(0x0204);
	beq(test05, true);
	lda_imm(0x04);
	sta_abs(0x0210);
	jmp(theend);
	

//; expected result:_ (0x40 = 0x33
//test05:
	test05.set_target(this);
	lda_imm(0x35);
	
	tax();
	dex();
	dex();
	inx();
	txa();
	
	tay();
	dey();
	dey();
	iny();
	tya();
	
	tax();
	lda_imm(0x20);
	txs();
	ldx_imm (0x10);
	tsx();
	txa();
	
	sta_zp(0x40);
	
//; check test05
	lda_zp(0x40);
	cmp_abs(0x0205);
	beq(test06, true);
	lda_imm (0x05);
	sta_abs(0x0210);
	jmp(theend);
	
	
//; expected result:_ (0x30 = 9d
//test06:
	test06.set_target(this);
//; reset to carry flag = 0
	rol();

	lda_imm(0x6a);
	sta_zp(0x50);
	lda_imm (0x6b);
	sta_zp(0x51);
	lda_imm (0xa1);
	sta_zp(0x60);
	lda_imm (0xa2);
	sta_zp(0x61);
	
	lda_imm (0xff);
	adc_imm (0xff);
	adc_imm (0xff);
	sbc_imm (0xae);
	
	sta_zp(0x40);
	ldx_zp(0x40);
	adc_zpx(0x00);
	sbc_zpx (0x01);
		
	adc_zp(0x60);
	sbc_zp(0x61);
	
	sta_abs(0x0120);
	lda_imm (0x4d);
	sta_abs(0x0121);
	lda_imm (0x23);
	adc_abs(0x0120);
	sbc_abs(0x0121);
	
	sta_zp(0xf0);
	ldx_zp(0xf0);
	lda_imm (0x64);
	sta_abs(0x0124);
	lda_imm (0x62);
	sta_abs(0x0125);
	lda_imm (0x26);
	adc_zpx (0x0100);
	sbc_zpx (0x0101);

	sta_zp(0xf1);
	ldy_zp(0xf1);
	lda_imm (0xe5);
	sta_abs(0x0128);
	lda_imm (0xe9);
	sta_abs(0x0129);
	lda_imm (0x34);
	adc_aby(0x0100);
	sbc_aby (0x0101);
	
	sta_zp(0xf2);
	ldx_zp(0xf2);
	lda_imm (0x20);
	sta_zp(0x70);
	lda_imm (0x01);
	sta_zp(0x71);
	lda_imm (0x24);
	sta_zp(0x72);
	lda_imm (0x01);
	sta_zp(0x73);
	adc_izx (0x41);
	sbc_izx (0x3f);
	
	sta_zp(0xf3);
	ldy_zp(0xf3);
	lda_imm (0xda);
	sta_zp(0x80);
	lda_imm (0x00);
	sta_zp(0x81);
	lda_imm (0xdc);
	sta_zp(0x82);
	lda_imm (0x00);
	sta_zp(0x83);
	lda_imm (0xaa);
	adc_izy (0x80);
	sbc_izy (0x82);
	sta_zp(0x30);
	
//; check test06
	lda_zp(0x30);
	cmp_abs(0x0206);
	beq(test07, true);
	lda_imm(0x06);
	sta_abs(0x0210);
	jmp(theend);
	
	
//; expected result:_ (0x15 = 0x7f
test07.set_target(this);
	//; prepare memory	
	lda_imm (0x00);
	sta_zp(0x34);
	lda_imm (0xff);
	sta_abs (0x0130);
	lda_imm (0x99);
	sta_abs (0x019d);
	lda_imm (0xdb);
	sta_abs(0x0199);
	lda_imm (0x2f);
	sta_zp(0x32);
	lda_imm (0x32);
	sta_zp(0x4f);
	lda_imm (0x30);
	sta_zp(0x33);
	lda_imm (0x70);
	sta_zp(0xaf);
	lda_imm (0x18);
	sta_zp(0x30);
	
	//; imm
	cmp_imm (0x18);
	beq(beq1, true); //; taken
	and_imm (0x00); //; not done
beq1.set_target(this);
	//; zpg
	ora_imm (0x01);
	cmp_zp(0x30);
	bne(bne1, true); //; taken
	and_imm (0x00); //; not done
bne1.set_target(this);
	//; abs
	ldx_imm(0x00);
	cmp_abs(0x0130);
	beq(beq2, true); //; not taken
	sta_zp(0x40);
	ldx_zp(0x40);
beq2.set_target(this);
	//; zpx
	cmp_zpx(0x27);
	bne(bne2, true); //; not taken
	ora_imm (0x84);
	sta_zp(0x41);
	ldx_zp(0x41);
bne2.set_target(this);
	//; abx
	and_imm (0xdb);
	cmp_abx(0x0100);
	beq(beq3, true); //; taken
	and_imm (0x00); //; not done
beq3.set_target(this);
	//; aby
	sta_zp(0x42);
	ldy_zp(0x42);
	and_imm (0x00);
	cmp_aby(0x0100);
	bne(bne3, true); //; taken
	ora_imm(0x0f); //; not done
bne3.set_target(this);
	//; idx
	sta_zp(0x43);
	ldx_zp(0x43);
	ora_imm (0x24);
	cmp_izx(0x40);
	beq(beq4, true); //; not taken
	ora_imm(0x7f);
beq4.set_target(this);
	//; idy
	sta_zp(0x44);
	ldy_zp(0x44);
	eor_imm (0x0f);
	cmp_izy(0x33);
	bne(bne4, true); //; not taken
	lda_zp(0x44);
	sta_zp(0x15);
bne4.set_target(this);

//; check test07
	lda_zp(0x15);
	cmp_abs(0x0207);
	beq(test08, true);
	lda_imm (0x07);
	sta_abs(0x0210);
	jmp(theend);


//; expected result:_ (0x42 = 0xa5
test08.set_target(this);
	//; prepare memory
	lda_imm (0xa5);
	sta_zp(0x20);
	sta_abs(0x0120);
	lda_imm (0x5a);
	sta_zp(0x21);
	
	//; cpx imm...
	ldx_imm (0xa5);
	cpx_imm (0xa5);
	beq(b1, true); //; taken
	ldx_imm(0x01); //; not done
b1.set_target(this);
	//; cpx zpg...
	cpx_zp(0x20);
	beq(b2, true); //; taken
	ldx_imm (0x02); //; not done
b2.set_target(this);
	//; cpx abs...
	cpx_abs(0x0120);
	beq(b3, true); //; taken
	ldx_imm (0x03); //; not done
b3.set_target(this);
	//; cpy imm...
	stx_zp(0x30);
	ldy_zp(0x30);
	cpy_imm(0xa5);
	beq(b4, true); //; taken
	ldy_imm (0x04); //; not done
b4.set_target(this);
	//; cpy zpg...
	cpy_zp(0x20);
	beq (b5, true); //; taken
	ldy_imm (0x05); //; not done
b5.set_target(this);
	//; cpy abs...
	cpy_abs (0x0120);
	beq (b6, true); //; taken
	ldy_imm (0x06); //; not done
b6.set_target(this);
	//; bit zpg...
	sty_zp(0x31);
	lda_zp(0x31);
	bit_zp(0x20);
	bne (b7, true); //; taken
	lda_imm(0x07); //; not done
b7.set_target(this);
	//; bit abs...
	bit_abs(0x0120);
	bne (b8, true); //; taken
	lda_imm (0x08); //; not done
b8.set_target(this);
	bit_zp(0x21);
	bne (b9, true); //; not taken
	sta_zp(0x42);
b9.set_target(this);

//; check test08
	lda_zp(0x42);
	cmp_abs(0x0208);
	beq(test09, true);
	lda_imm (0x08);
	sta_abs(0x0210);
	jmp (theend);


//; expected result:_ (0x80 = 0x1f
test09.set_target(this);
	//; prepare memory
	lda_imm (0x54);
	sta_zp(0x32);
	lda_imm (0xb3);
	sta_zp(0xa1);
	lda_imm (0x87);
	sta_zp(0x43);
	
	//; bpl
	ldx_imm (0xa1);
	bpl (bpl1, true); //; not taken
	ldx_imm (0x32);
bpl1.set_target(this);
	ldy_zpx (0x00);
	bpl (bpl2, true); //; taken
	lda_imm (0x05); //; not done
	ldx_zp (0xa1); //; not done
bpl2.set_target(this);

	//; bmi
	bmi (bmi1, true); //; not taken
	sbc_imm (0x03);
bmi1.set_target(this);
	bmi (bmi2, true); //; taken
	lda_imm (0x41); //; not done
bmi2.set_target(this);

	//; bvc
	eor_imm (0x30);
	sta_zp(0x32);
	adc_zpx (0x00);
	bvc (bvc1, true); //; not taken
	lda_imm (0x03);
bvc1.set_target(this);
	sta_zp(0x54);
	ldx_zpy (0x00);
	adc_zpx (0x51);
	bvc (bvc2, true); //; taken
	lda_imm (0xe5); //; not done
bvc2.set_target(this);

	//; bvs
	adc_zpx (0x40);
	bvs (bvs1, true); //; not taken
	sta_aby (0x0001);
	adc_zp(0x55);
bvs1.set_target(this);
	bvs (bvs2, true); //; taken
	lda_imm (0x00);
bvs2.set_target(this);

	//; bcc
	adc_imm (0xf0);
	bcc (bcc1, true); //; not taken
	sta_zp(0x60);
	adc_zp(0x43);
bcc1.set_target(this);
	bcc (bcc2, true); //; taken
	lda_imm (0xff);
bcc2.set_target(this);

	//; bcs
	adc_zp(0x54);
	bcs (bcs1, true); //; not taken
	adc_imm (0x87);
	ldx_zp(0x60);
bcs1.set_target(this);
	bcs (bcs2, true); //; taken
	lda_imm (0x00); //; not done
bcs2.set_target(this);
	sta_zpx (0x73);
	
//; check test09
	lda_zp(0x80);
	cmp_abs(0x0209);
	beq (test10, true);
	lda_imm(0x09);
	sta_abs(0x0210);
	jmp(theend);

	
//; expected result:_ (0x30 = 0xce
test10.set_target(this);

//; reset to carry = 0 & overflow = 0
	adc_imm (0x00);

	lda_imm (0x99);
	adc_imm (0x87);
	clc();
	nop();
	bcc (t10bcc1, true); //; taken
	adc_imm (0x60); //; not done
	adc_imm (0x93); //; not done
t10bcc1.set_target(this);
	sec();
	nop();
	bcc (t10bcc2, true); //; not taken
	clv();
t10bcc2.set_target(this);
	bvc (t10bvc1, true); //; taken
	lda_imm (0x00); //; not done
t10bvc1.set_target(this);
	adc_imm (0xad);
	nop();
	sta_zp(0x30);
	
//; check test10
	lda_zp(0x30);
	cmp_abs(0x020a);
	beq(test11, true);
	lda_imm (0x0a);
	sta_abs(0x0210);
	jmp (theend);
	
	
//; expected result:_ (0x30 = 0x29
test11.set_target(this);

//; reset to carry = 0 & zero = 0
	adc_imm (0x01);
	
	lda_imm (0x27);
	adc_imm (0x01);
	sec();
	php();
	clc();
	plp();
	adc_imm (0x00);
	pha();
	lda_imm (0x00);
	pla();
	sta_zp(0x30);
	
//; check test11
	lda_zp(0x30);
	cmp_abs(0x020b);
	beq (test12, true);
	lda_imm (0x0b);
	sta_abs(0x0210);
	jmp (theend);
	
	
//; expected result:_ (0x33 = 0x42
test12.set_target(this);
	clc();
	lda_imm (0x42);
	bcc(runstuff, true);
	sta_zp(0x33);
	bcs (t12end, true);
runstuff.set_target(this);
	lda_imm (0x45);
	pha();
	lda_imm (0x61);
	pha();
	sec();
	php();
	clc();
	rti();
t12end.set_target(this);

//; check test12
	lda_zp(0x33);
	cmp_abs(0x020c);
	beq (test13, true);
	lda_imm (0x0c);
	sta_abs(0x0210);
	jmp (theend);
	
	
//; expected result:_ (0x21 = 0x6c_iz (simulator)
//;                 _ (0x21 = 0x0c_iz (ours)
test13.set_target(this);

//; reset to carry = 0 & zero = 0
	adc_imm (0x01);
	
	sei();
	sed();
	php();
	pla();
	sta_zp(0x20);
	cli();
	cld();
	php();
	pla();
	adc_zp(0x20);
	sta_zp(0x21);

//; check test13
	lda_zp(0x21);
	cmp_abs(0x020d);
	beq (test14, true);
	lda_imm (0x0d);
	sta_abs(0x0210);
	jmp (theend);


//; expect result:_ (0x60 = 0x42
test14.set_target(this);
// jds brk does work, but if i uncomment it, then the code won't match the dump
// will test later
	//; !!! notice: brk doesn't work in this
	//; simulator, so commented instructions 
	//; are what should be executed...
	//;jmp pass_intrp
	lda_imm (0x41);
	sta_zp(0x60);
	//;rti
	//;pass_intrp:
	//;lda_imm (0xff
	//;sta_ (0x60
	//;brk_iz (two bytes)
	inc_zp(0x60);
	
//; check test14
	lda_zp(0x60);
	cmp_abs(0x020e);
	beq (suiteafinal, true);
	lda_imm (0x0e);
	sta_abs(0x0210);
	jmp (theend);

suiteafinal.set_target(this);
	//; if_ (0x0210 == 0xfe, increment
	//;_iz (checking that it didn't 
	//;  happen to wander off and 
	//;  not run our instructions
	//;  to say which tests failed...)
	lda_imm (0xfe);
	cmp_abs(0x0210);
	bne (theend, true);
	inc_abs(0x0210);
theend.set_target(this);
	jmp (theend);

	for (int i = 0; i < PreAssembledLength; ++i) {
		if (PreAssembled[i] == *map_addr(0x4000 + i)) {
			std::cout << std::hex << (int)PreAssembled[i] << ' ';
			if ((i & 31) == 0) std::cout << '\n';
		}
		else {
			std::cout << "\n mismatch at " << std::hex << i << " = " << std::dec << i << " should be " << std::hex << (int)PreAssembled[i]
				<< ' ' << (int)PreAssembled[1 + i] << ' ' << (int)PreAssembled[2 + i] << " is " << (int)*map_addr(0x4000 + i) << ' '
				<< (int)*map_addr(0x4000 + i + 1) << ' ' << (int)*map_addr(0x4000 + i + 2) << '\n ';
			return false;
		}
	}
	return true;
}